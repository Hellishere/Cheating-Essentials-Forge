package com.kodehawa.ce.forge.loader;

import java.util.Arrays;
import java.util.logging.Level;

import net.minecraft.command.ICommandManager;
import net.minecraft.command.ServerCommandManager;
import net.minecraft.server.MinecraftServer;
import net.minecraftforge.common.ForgeVersion;
import net.minecraftforge.common.MinecraftForge;

import org.apache.commons.lang3.StringUtils;

import com.kodehawa.ce.forge.common.events.EventRegisterer;
import com.kodehawa.ce.forge.common.proxy.CommonProxy;
import com.kodehawa.ce.forge.tick.TickHandler;
import com.kodehawa.ce.module.annotations.ModuleExperimental;
import com.kodehawa.ce.module.annotations.ModuleTechnical;
import com.kodehawa.ce.module.classes.*;
import com.kodehawa.ce.module.core.CheatingEssentialsModule;
import com.kodehawa.ce.module.enums.EnumLogType;
import com.kodehawa.ce.module.handlers.ModuleManager;
import com.kodehawa.ce.playerrelations.Enemy;
import com.kodehawa.ce.playerrelations.Friend;
import com.kodehawa.ce.reflect.ReflectionHelper;
import com.kodehawa.ce.util.CheatingEssentialsException;
import com.kodehawa.ce.util.FileManager;
import com.kodehawa.ce.vanilla.command.*;

import cpw.mods.fml.common.FMLLog;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartedEvent;
import cpw.mods.fml.common.network.NetworkMod;
import cpw.mods.fml.common.registry.TickRegistry;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

/**
 * Forge Class Loader for {@link CheatingEssentials} in {@link MinecraftForge}, mostly created for
 * Optifine users and users that like to use other mods with it. It should not be loaded in
 * a server envirioment, but some cheats / hacks are compatible with it.
 * The {@link ReflectionHelper} class is for some cheats that need a private or unaccesible value.
 * This loader initialize the singleton instance of all classes that need it for load it in the
 * class patch.
 * @version 3.4.0R3
 * @author Kodehawa
 * @since 25/08/2013
 */

@Mod(modid="Cheating-Essentials", name="Cheating Essentials", version=CE_ForgeLoader.MOD_VERSION, useMetadata=true) //Gets mod data
@NetworkMod(clientSideRequired=true, serverSideRequired=false) 
@SideOnly(Side.CLIENT)

public class CE_ForgeLoader {
	
    public static TickHandler tickHandler = new TickHandler();
	
    @Instance("Cheating-Essentials")
    public static CE_ForgeLoader instance;
    
    @SidedProxy(clientSide="com.kodehawa.ce.forge.common.proxy.ClientProxy", serverSide="com.kodehawa.ce.forge.common.proxy.CommonProxy")
    public static CommonProxy proxyHandler;
   
    public static CE_ForgeLoader instance(){
    	return instance;
    }
    
    @EventHandler
    public void preInit(FMLPreInitializationEvent event) {
    	
		/* -------------------- CE METADATA DECLARATION ------------------------------ */
    	
    	ModMetadata modMeta = event.getModMetadata();
		modMeta.authorList = Arrays.asList(new String[] { "Kodehawa", "ReesZRB", "Luna" });
		modMeta.autogenerated = false;
		modMeta.credits = "Kodehawa, mod console by ReesZRB.";
		modMeta.description = "Cheat Anything if you want, discover edges of Minecraft! First Forge cheating mod in 1.6.2";
		modMeta.url = "http://www.minecraftforum.net/topic/1846289-";
		
		/* ---------------------------------------------------------------------- */
		
    	FMLLog.log("Cheating Essentials", Level.INFO,
    			"Cheating Essentials Forge Loader: " + StringUtils.defaultString(CE_ForgeLoader.class.getName()) +
    			" in Minecraft Forge " + ForgeVersion.getVersion());
    	FMLLog.log("Cheating Essentials", Level.INFO, "Loading mod instances...");
	    initializeSingletons();
	    /* This will get big. */
	    addModule(new CreativeFly()); addModule(new Fly()); addModule(new FastPlace()); addModule(new Day() );
    	addModule(new Spectator()); addModule(new NoFall()); addModule(new Sprint()); addModule(new Unpushable());
    	addModule(new Mobaura()); addModule(new Waterwalk()); addModule(new AutoRespawn()); addModule(new Fullbright());
    	addModule(new FastBreak()); addModule(new ChestESP()); addModule(new BlockESP()); addModule(new PacketNoFall());
    	addModule(new MoarJump()); addModule(new PlayerESP()); addModule(new DynamicFly()); addModule(new MobESP());
    	addModule(new Invisible()); addModule(new NoSlowDown()); addModule(new Tracers()); addModule(new Breadcrumb());
    	addModule(new Step()); addModule(new UtilMobHitbox()); addModule(new UtilReloadChunks()); addModule(new UtilAdvancedTooltips()); 
    	addModule(new Gui()); addModule(new Console());
    	if(ModuleManager.getInstance().modules.size() == 0){
    		//Impossible?
        	throw new CheatingEssentialsException("Module count is 0! That's very wrong");
    	}
    	TickRegistry.registerScheduledTickHandler(tickHandler, Side.CLIENT);
    }
       
    @EventHandler
    public void load(FMLInitializationEvent event) {
        proxyHandler.registerRenderers();
        MinecraftForge.EVENT_BUS.register(new EventRegisterer());
    }
   
    @EventHandler
    public void postInit(FMLPostInitializationEvent event) {
    	logWithCategory("Started Cheating Essentials "+getForgeCEVersion()+" in Minecraft 1.6.2 with Minecraft Forge " + ForgeVersion.getVersion(), EnumLogType.FINEST);
    }
    
    @EventHandler
    public void serverStarted(FMLServerStartedEvent evt){
    	MinecraftServer mcServer = MinecraftServer.getServer(); 
    	ICommandManager theCommand = mcServer.getCommandManager();
    	ServerCommandManager setCommand = ((ServerCommandManager) theCommand); 
    	/* Vanilla-based client commands */
    	setCommand.registerCommand(new CommandBind());
    	setCommand.registerCommand(new CommandBreadcrumb());
    	setCommand.registerCommand(new CommandBlockESP());
    	setCommand.registerCommand(new CommandStepHeight());
    	setCommand.registerCommand(new CommandModuleEnable());
    	setCommand.registerCommand(new CommandFriend());
    	setCommand.registerCommand(new CommandEnemy());
    	setCommand.registerCommand(new CommandFlySpeed());
    }

	private void initializeSingletons(){
        Enemy.getInstance();
        Friend.getInstance();
        FileManager.getInstance();
    }
	
	public static final String getForgeCEVersion(){
		return MaV + "." + M + "."+ R + RL; 
	}
	
	public void log( String s ){
		FMLLog.log("Cheating Essentials", Level.INFO, s);
	}
	
	public void logWithCategory( String s, EnumLogType type ){
		FMLLog.log("Cheating Essentials", Level.INFO, "["+type+"]" + " " + s);
	}
	
	public void addModule(final CheatingEssentialsModule e) {
        ModuleManager.getInstance().modules.add( e );
        CE_ForgeLoader.instance().log("Module Loaded: ".concat(StringUtils.upperCase(e.getName()).concat(" ["+e.toString()+"]")));
          if (e.getClass().isAnnotationPresent(ModuleExperimental.class)) {
        	  CE_ForgeLoader.instance().log("Module \"".concat(e.getName()).concat("\" contains ModuleExperimental annotation, use it as your own risk!"));
        	  }
          if (e.getClass().isAnnotationPresent(ModuleTechnical.class)) {
        	  CE_ForgeLoader.instance().log("Module \"".concat(e.getName()).concat("\" is a technical module!"));
        	  }
          for(CheatingEssentialsModule module : ModuleManager.getInstance().modules){
              //External Module control.
        	  if(!module.version.equals("1.6.2")){
        		  throw new CheatingEssentialsException("Reached bad Minecraft version for module ".concat(StringUtils.upperCase(module.name)));
        	  }
          }
          }
	
	static final String MaV = "3";
    static final String M = "4";
    static final String R = "0";
    static final String RL = "R3";
    public static final String MOD_VERSION = MaV + M + R + RL;
}